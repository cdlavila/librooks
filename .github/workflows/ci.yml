name: CI

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

jobs:
  ESLint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Check ESLint
        run: npm run lint
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test
  e2e-tests:
    runs-on: ubuntu-latest
    container:
      image: node:18
    services:
      mysqldb-test:
        image: mysql:latest
        env:
          MYSQL_ROOT_HOST: '%'
          MYSQL_ROOT_PASSWORD: ${{secrets.DATABASE_ROOT_PASSWORD_TEST}}
          MYSQL_DATABASE: ${{secrets.DATABASE_NAME_TEST}}
          MYSQL_USER: ${{secrets.DATABASE_USER_TEST}}
          MYSQL_PASSWORD: ${{secrets.DATABASE_PASSWORD_TEST}}
        ports:
          - 3306:3306
        # Set health checks to wait until mysql has started
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - name: Run migrations
        run: npm run migration:run
        env:
          DATABASE_HOST_TEST: ${{secrets.DATABASE_HOST_TEST}}
          DATABASE_PORT_TEST: ${{secrets.DATABASE_PORT_TEST}}
          DATABASE_NAME_TEST: ${{secrets.DATABASE_NAME_TEST}}
          DATABASE_USER_TEST: ${{secrets.DATABASE_USER_TEST}}
          DATABASE_PASSWORD_TEST: ${{secrets.DATABASE_PASSWORD_TEST}}
          DATABASE_ROOT_PASSWORD_TEST: ${{secrets.DATABASE_ROOT_PASSWORD_TEST}}
      - name: Run e2e tests
        run: npm run test:e2e
        env:
          NODE_ENV: ${{secrets.NODE_ENV}}
          PORT: ${{secrets.PORT}}
          DATABASE_HOST_TEST: ${{secrets.DATABASE_HOST_TEST}}
          DATABASE_PORT_TEST: ${{secrets.DATABASE_PORT_TEST}}
          DATABASE_NAME_TEST: ${{secrets.DATABASE_NAME_TEST}}
          DATABASE_USER_TEST: ${{secrets.DATABASE_USER_TEST}}
          DATABASE_PASSWORD_TEST: ${{secrets.DATABASE_PASSWORD_TEST}}
          DATABASE_ROOT_PASSWORD_TEST: ${{secrets.DATABASE_ROOT_PASSWORD_TEST}}
          EMAIL: ${{secrets.EMAIL}}
          EMAIL_PASSWORD: ${{secrets.EMAIL_PASSWORD}}
          JWT_SECRET: ${{secrets.JWT_SECRET}}
          ROOT_PASSWORD: ${{secrets.ROOT_PASSWORD}}
